#!/usr/bin/env python3

from contextlib import suppress
from datetime import datetime
import argparse
import calendar
import logging
import logging.handlers
import os.path
import re
import readline
import select
import shlex
import shutil
import sys
import termios
import textwrap
import traceback
import tty

import coloredlogs

BASENAME_EXCLUDE_PATTERNS = frozenset([r"\..*", "Icon\r", r".*\.lo?ck"])

FULLNAME_EXCLUDE_PATTERNS = frozenset([r".*\.git/.*",
                                       r".*\.svn/.*",
                                       r".*\.hg/.*",
                                       r".*\.bzr/.*"])

YEAR = ""


def main(argv, syserr_handler):
    logger = logging.getLogger('normalize-filename')

    class ArgumentParser(argparse.ArgumentParser):

        def error(self, message):
            parser.print_help()
            raise FatalException(message)

    parser = ArgumentParser(description="Normalizes filenames in a variety of ways. "
                            "See https://github.com/andrewferrier/normalize-filename for more information.", add_help=False)

    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help="Make the output more verbose. This affects the output to the console. "
                        "Using this twice makes it doubly verbose.")

    parser.add_argument('-h', '--help', action='store_true',
                        help="Show some basic help information about how to use normalize-filename.")

    parser.add_argument('-n', '--dry-run', action='store_true', dest="dry_run",
                        help="Don't actually make any changes, just show them. Forces a minimum of "
                        "a single level of verbosity (-v).")

    parser.add_argument('-i', '--interactive', action='store_true', dest="interactive",
                        help="Ask about each change before it is done.")

    parser.add_argument('-a', '--all', action='store_true', dest="all",
                        help="Affect all files, including those that by default would be excluded.")

    parser.add_argument('-f', '--force', action='store_true', dest='force',
                        help="Overwrite target files even if they already "
                        "exist (USE WITH CAUTION, consider using --dry-run "
                        "first).")

    parser.add_argument('-t', '--add-time', action='store_true', dest='add_time',
                        help='If a time is not found in the filename, add one '
                        'when adding the date prefix.')

    parser.add_argument('-r', '--recursive', action='store_true', dest="recursive", default=False,
                        help="Recurse into directories specified on the command line. The default is "
                        "not to do this, and simply look at the name of the directory itself.")

    parser.add_argument('--max-years-ahead', type=int, dest='max_years_ahead', default=5,
                        help='Consider years in filenames further ahead than this number not '
                        'to be valid years. Defaults to 5.')

    parser.add_argument('--max-years-behind', type=int, dest='max_years_behind', default=30,
                        help='Consider years in filenames further behind than this number not '
                        'to be valid years. Defaults to 30.')

    log_option = parser.add_mutually_exclusive_group()

    log_option.add_argument('--undo-log-file', type=str, dest='undo_log_file',
                            help="Specify the name of the shell script used to log "
                            "'undo commands' for normalize-filename; see the "
                            "instructions at the head of this file for more "
                            "information on use. Defaults to "
                            "~/.normalize-file-undo.log.sh")

    log_option.add_argument('--no-undo-log-file', dest='no_undo_log_file',
                            action='store_true', help="Inverse of "
                            "--undo-log-file; don't store any undo commands.")

    time_option = parser.add_mutually_exclusive_group()

    time_option.add_argument('--now', action='store_const', dest="time_option", const="now",
                             help="Use the date and time now as the default "
                             "prefix for files that don't already have a date "
                             "and time.")

    time_option.add_argument('--latest', '--newest', action='store_const', dest="time_option", const="latest",
                             help="Use the latest of ctime and mtime on a file "
                             "to find a date prefix for files that don't already "
                             "have a date and time. Note that ctime is *not* "
                             "file creation time on Linux/OS X; see "
                             "http://lwn.net/Articles/397442/.")

    time_option.add_argument('--earliest', '--oldest', action='store_const', dest="time_option", const="earliest",
                             help="Use the earliest of ctime and mtime on a file "
                             "to find a date prefix for files that don't already "
                             "have a date and time. This is the default if you "
                             "don't specify --now or --latest.")

    parser.set_defaults(time_option="earliest",
                        undo_log_file=os.path.join(os.path.expanduser('~'), '.normalize-filename-undo.log.sh'))

    class FilenamesAction(argparse.Action):
        # pylint: disable=too-few-public-methods

        def __call__(self, parser, args, values, option=None):
            args.filenames = values
            if (not args.help) and len(values) < 1:
                parser.error("You must specify some file or directory names.")

    parser.add_argument('filenames', metavar="filename", nargs='*', help='Filenames', action=FilenamesAction)

    args = parser.parse_args(argv[1:])

    if args.help:
        parser.print_help()
        return

    if args.dry_run:
        if args.verbose < 1:
            args.verbose = 1

    if syserr_handler:
        if args.verbose > 1:
            syserr_handler.setLevel(logging.DEBUG)
        elif args.verbose == 1:
            syserr_handler.setLevel(logging.INFO)
        else:
            syserr_handler.setLevel(logging.WARNING)

    logger.debug("Arguments are: " + str(args))

    if args.no_undo_log_file:
        args.undo_log_file = None

    global YEAR

    year_now = datetime.now().year
    year_list = [str(year) for year in range(year_now - args.max_years_behind, year_now + args.max_years_ahead)]
    logger.debug("Valid years are: " + str(year_list))
    YEAR = r"(" + '|'.join(year_list) + r")"

    with suppress(QuitException):
        for filename in args.filenames:
            filename = os.path.abspath(filename)
            if not os.path.exists(filename):
                raise FatalException(filename + " specified on the command line does not exist.")

            if os.path.isdir(filename) and args.recursive:
                new_filename = process_filename(filename, args)
                assert new_filename is not None
                walk_tree(new_filename, args)
            else:
                process_filename(filename, args)


def walk_tree(dirname, args):
    logger = logging.getLogger("normalize-filename")

    assert os.path.isdir(dirname)
    logger.debug("Walking directory tree " + dirname)
    dirlist = sorted(os.listdir(dirname))

    for entry in dirlist:
        entry = os.path.join(dirname, entry)

        entry = process_filename(entry, args)
        assert entry is not None
        if os.path.isdir(entry):
            walk_tree(entry, args)


def process_filename(filename, args):
    logger = logging.getLogger("normalize-filename")

    logger.debug("Processing filename " + filename)
    original_filename = filename
    basename = os.path.basename(filename)

    if not args.all:
        match = False

        for EXCLUDE_PATTERN in BASENAME_EXCLUDE_PATTERNS:
            if re.fullmatch(EXCLUDE_PATTERN, basename):
                match = True
                break

        if not match:
            for EXCLUDE_PATTERN in FULLNAME_EXCLUDE_PATTERNS:
                if re.fullmatch(EXCLUDE_PATTERN, filename):
                    match = True
                    break

        if match:
            logger.info("Skipping " + filename.strip() + " as it matches pattern " + EXCLUDE_PATTERN)
            return original_filename

    def replacement(matchobj):
        logger.debug("replacement() called, matchobj = " + str(matchobj))

        year = matchobj.group('year') if matchobj.group('year') is not None else matchobj.group('year2')
        month = matchobj.group('month') if matchobj.group('month') is not None else matchobj.group('month2')
        day = matchobj.group('day') if matchobj.group('day') is not None else matchobj.group('day2')

        if not month.isdigit():
            try:
                monthDigit = list(calendar.month_abbr).index(month)
            except ValueError:
                monthDigit = list(calendar.month_name).index(month)

            month = str(monthDigit)

        if len(month) == 1:
            month = "0" + month

        if day is not None and len(day) == 1:
            day = "0" + day

        return (year + "-" +
                month +
                (("-" + day) if day is not None else '') +
                (("T" + matchobj.group('hour')) if matchobj.group('hour') is not None else '') +
                (("-" + matchobj.group('minute')) if matchobj.group('minute') is not None else '') +
                (("-" + matchobj.group('second')) if matchobj.group('second') is not None else '') +
                (("-" + matchobj.group('prefix')) if matchobj.group('prefix') != '' else '') +
                (matchobj.group('suffix') if matchobj.group('suffix') != '' else ''))

    (non_extension, extension) = os.path.splitext(basename)

    MONTH = r"(0\d|1[012]|\d(?!\d)|" + '|'.join(calendar.month_name[1:13]) + "|" + '|'.join(calendar.month_abbr[1:13]) + ")"
    DAY = r"([012]\d|3[01]|[1-9](?!\d))"
    HOUR = r"([01]\d|2[0123])"
    MINUTE = SECOND = r"[012345]\d"

    YMD_SEPARATOR = r"[-_.\s]?"
    HMS_SEPARATOR = r"[-_.\s]?"
    DATE_TIME_SEPARATOR = r"([-_T\s]|\sat\s|,\s)"

    (basename, number_of_subs) = re.subn(r"^(?P<prefix>.*?)[-_]?" +
                                         r"((?P<year>" + YEAR + r")" +
                                         YMD_SEPARATOR + r"(?P<month>" + MONTH + r")" +
                                         r"(" + YMD_SEPARATOR + r"(?P<day>" + DAY + r"))?|" +
                                         r"(?P<day2>" + DAY + r")" +
                                         YMD_SEPARATOR + r"(?P<month2>" + MONTH + r")" +
                                         YMD_SEPARATOR + r"(?P<year2>" + YEAR + r"))" +
                                         r"(" + DATE_TIME_SEPARATOR + r"(?P<hour>" + HOUR + r")"
                                         r"(" + HMS_SEPARATOR + r"(?P<minute>" + MINUTE + r")"
                                         r"(" + HMS_SEPARATOR + r"(?P<second>" + SECOND + r"))?)?)?"
                                         r"(?P<suffix>.*)$",
                                         replacement,
                                         non_extension)
    basename = basename.strip() + extension

    assert number_of_subs <= 1

    if number_of_subs == 0:
        logger.debug("Didn't find date or time")

        timetouse = get_timetouse(args, filename)

        if args.add_time:
            basename = timetouse.strftime("%Y-%m-%dT%H-%M-%S-") + basename
        else:
            basename = timetouse.strftime("%Y-%m-%d-") + basename

    filename = os.path.join(os.path.dirname(original_filename), basename)
    logger.debug("Potential new filename for " + original_filename + " is " + filename)

    if filename == original_filename:
        logger.debug("New filename would be identical, skipping.")
        return original_filename

    validate_move(args, original_filename, filename)

    move_it = True

    if args.interactive:
        move_it = ask_yes_no("Move " + original_filename.strip() + " to .../" + basename + " [y/n/e/q]?")
        if move_it == b'e':
            new_filename = rlinput("What new filename? ", basename)
            new_filename = os.path.join(os.path.dirname(original_filename), new_filename)
            validate_move(args, original_filename, new_filename)
            filename = new_filename
        else:
            move_it = True if move_it == b'y' else False

    if move_it:
        if not args.dry_run:
            shiftfile(args, original_filename, filename)
            return filename
        else:
            logger.info("Not moving " + original_filename.strip() + " to " + filename + "; dry run.")
            return original_filename
    else:
        logger.info("Not moving " + original_filename.strip())
        return original_filename


def get_timetouse(args, filename):
    ctime = datetime.fromtimestamp(os.path.getctime(filename))
    mtime = datetime.fromtimestamp(os.path.getmtime(filename))

    if args.time_option == "now":
        timetouse = datetime.now()
    elif args.time_option == "earliest":
        timetouse = min(ctime, mtime)
    else:
        timetouse = max(ctime, mtime)

    return timetouse


def validate_move(args, original_filename, filename):
    if os.path.exists(filename) and not args.force:
        raise FatalException("Want to move " + original_filename.strip() + " to " + filename + ", but it already exists.")


def rlinput(prompt, prefill=''):
    readline.set_startup_hook(lambda: readline.insert_text(prefill))
    try:
        return input(prompt)
    finally:
        readline.set_startup_hook()


def shiftfile(args, source, target):
    logger = logging.getLogger("normalize-filename")

    source = os.path.abspath(source)
    target = os.path.abspath(target)

    dt_now = datetime.now().strftime("%Y-%m-%dT%H-%M-%S")

    try:
        shutil.move(source, target)
    except PermissionError as permission_error:
        filename = permission_error.filename
        if filename == source:
            raise FatalException("Permission denied on source: " + filename)
        elif filename == target:
            raise FatalException("Permission denied on target: " + filename)
        else:
            raise

    if args.undo_log_file:
        check_undo_log_file_header(args)
        with open(args.undo_log_file, "a", encoding='utf-8') as log_file:
            log_file.write("# " + dt_now + ": moving " + source + " to " + target + "\n")
            log_file.write("mv " + shlex.quote(target) + " " + shlex.quote(source) + "\n")
    logger.info(source + " moved to " + target)

def check_undo_log_file_header(args):
    if not os.path.exists(args.undo_log_file):
        with open(args.undo_log_file, "w") as log_file:
            wrapper = textwrap.TextWrapper(initial_indent="# ", subsequent_indent="# ")
            log_file.write("#!/bin/sh\n")
            log_file.write(wrapper.fill("File generated by normalize-filename "
                                        "(see http://www.github.com/andrewferrier/normalize-filename). This file is "
                                        "utf-8 encoded)") + "\n")
            log_file.write("#\n")
            log_file.write(wrapper.fill("This file contains shell commands which can be run to invert (undo) the effects of "
                                        "running normalize-filename. They must be run in *reverse order*. You can achieve "
                                        "this by running `tac " + args.undo_log_file + " | sh`. If you wish, you can edit "
                                        "the file first to control which actions are undone.") + "\n")
            log_file.write("#\n")
            log_file.write(wrapper.fill("(Specific note for MacOS: tac may not be installed. You can install gtac, the "
                                        "equivalent command, using `brew install coreutils`. You will need Homebrew - "
                                        "http://brew.sh/ - installed)") + "\n")
            log_file.write("\n")


def ask_yes_no(prompt):
    while True:
        print(prompt, end="", flush=True)
        try:
            key = readchar().lower()
        except KeyboardInterrupt:
            raise QuitException()
        print(str(key, "utf-8"))
        if key == b'y':
            return key
        elif key == b'n':
            return key
        elif key == b'e':
            return key
        elif key == b'q':
            raise QuitException()


def readchar(wait_for_char=True):
    assert sys.platform.startswith('linux') or sys.platform == 'darwin'
    try:
        old_settings = termios.tcgetattr(sys.stdin)
        tty.setcbreak(sys.stdin.fileno())
        try:
            if wait_for_char or select.select([sys.stdin, ], [], [], 0.0)[0]:
                return os.read(sys.stdin.fileno(), 1)
        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    except termios.error:
        return os.read(sys.stdin.fileno(), 1)
    return None

warning_pending = False


def warning(message):
    global warning_pending
    logger = logging.getLogger("normalize-filename")
    logger.warning(message)
    warning_pending = True


class FatalException(Exception):

    def __init__(self, value):
        Exception.__init__(self, value)
        self.value = value

    def __str__(self):
        return repr(self.value)


class QuitException(Exception):
    pass

if __name__ == "__main__":
    logger_setup = logging.getLogger("normalize-filename")
    logger_setup.propagate = False
    logger_setup.setLevel(logging.DEBUG)

    sysErrHandler = logging.StreamHandler(stream=sys.stderr)
    sysErrHandler.setLevel(logging.WARNING)
    sysErrFormatter = coloredlogs.ColoredFormatter('%(levelname)s: %(message)s')
    sysErrHandler.setFormatter(sysErrFormatter)
    logger_setup.addHandler(sysErrHandler)

    try:
        main(sys.argv, sysErrHandler)
    except FatalException as error:
        logger_setup.error(error.value)
        sys.exit(2)
    except:
        traceback.print_exc()
        sys.exit(3)

    if warning_pending:
        sys.exit(1)
